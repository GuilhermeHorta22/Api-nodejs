Metodos HTTP:
get -> listar
post -> criar
put -> editar varios
patch -> editar um
delete -> deletar

app.get('/usuarios') -> listando usuarios
app.post('/usuarios') -> criando usuarios
app.put('/usuarios') -> editando usuarios
app.delete('/usuarios') -> deletando usuarios

HTTP Status:
200 -> Sucesso na requisição
400 -> Erro de cliente (FrontEnd)
500 -> Erro de servidor (BackEnd)

As rotas precisam de duas coisas:
1- tipo de rota / metodo HTTP
2- endereço - EX: www.lojadoseuze.com/produtos

request -> req = fazendo requisição
response -> res = retornando uma resposta

Comando para restart automatico do servidor: node --watch server.js
isso faz com que eu não tenha que parar e executar novamente o servidor

query params(GET) -> faz com que eu mande informações de parametros pela minha URL
utilizamos mais ele quando não é uma informação importante

route params(GET / PUT / DELTE) -> buscar, deletar, editar algo especifico

body params(POST e PUT) -> utilizamos quando é muitas infomações ou infomações delicadas
EX: numero de cartão, registros como cpf

**********************************************
Login e senha do banco de dados da minha API
Username: ghorta800
senha: hwE0xoy7h7FVWaC2
**********************************************

PRISMA:
Rodando o comando -> npx prisma studio
ele faz com que abra uma interface grafica para que eu consiga ver meu banco

await: serve para avisar o javascript que vai voltar algo, então ele tem que esperar. Usamos quando
vamos acessar o banco de dados
*O comando await só se usa dentro de uma função async

query params -> serve para filtrar alguns registros do nosso banco de dados

npm install axios -> biblioteca para facilitar na conexão do frontEnd com o backEnd

quando uma pagina se chama index eu não preciso passar o caminho dela por inteiro, apenas a pasta já serve
Ex: /FrontEnd-Api/services -> puxa o index sem precisar escrever /FrontEnd-Api/services/index.js

useState -> eu crio uma variavel usando ele para que sempre que alterar o valor dessa variavel mude tambem na tela

  async function deleteUsers(id)
  {
    await api.delete(`/usuarios/${id}`) //coloca a `` para conseguir atribuir uma variavel na URL
    getUsers()
  }

  onClick={() => deleteUsers(user.id)}